#####
##### `AbstractTransformSpecification`
#####

"""
    abstract type AbstractTransformSpecification

Transform specifications are represented by subtypes of `AbstractTransformSpecification`.
Each leaf should be immutable and define methods for
- [`input_specification`](@ref) returns type expected/allowed as transform input
- [`output_specification`](@ref) returns output type generated by successfully completed processing
- [`transform!`](@ref), which transforms an input of type `input_specification`
    and returns an output of type `output_specification`.

It may additionally define a custom non-mutating [`transform`](@ref) function.
"""
abstract type AbstractTransformSpecification end

"""
    transform!(ts::AbstractTransformSpecification, input)

Return result of applying `ts` to an `input` of type `input_specification(ts)`,
where result is an `output_specification(ts)`. May mutate `input`.

See also: [`transform`](@ref)
"""
function transform! end

"""
    transform(ts::AbstractTransformSpecification, input)

Return result of applying `ts` to an `input` of type `input_specification(ts)`,
where result is an `output_specification(ts)`. May not mutate `input`.

See also: [`transform!`](@ref)
"""
transform(ts::AbstractTransformSpecification, input) = transform!(ts, deepcopy(input))

"""
    input_specification(ts::AbstractTransformSpecification)

Return specification accepted as input to `ts`.
"""
function input_specification end

"""
    output_specification(ts::AbstractTransformSpecification)

Return specification of return value of `ts`.
"""
function output_specification end
