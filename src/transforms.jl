#####
##### `AbstractTransformSpecification`
#####

"""
    abstract type AbstractTransformSpecification

Transform specifications are represented by subtypes of `AbstractTransformSpecification`.
Each leaf should be immutable and define methods for
- [`input_specification](@ref)` returns type expected/allowed as transform input
- [`output_specification](@ref)` returns output type generated by successfully completed processing
- [`apply!`](@ref), which performs processing on an input record of type `input_specification`
    and returns an output of type `output_specification`
"""
abstract type AbstractTransformSpecification end
# TODO-future: add/document mutation of transform input

"""
    apply!(process::AbstractTransformSpecification, input_record) -> TransformSpecificationResult

Return result of applying `process` to an `input_record` of type `process.input_specification`,
where result is `TransformSpecificationResult` with output record type `process.output_record`.
"""
function apply! end

"""
    input_specification(process::AbstractTransformSpecification) -> Type{<:Legolas.AbstractRecord}

Return Legolas schema of record accepted as input to `process`.
"""
function input_specification end

"""
    output_specification(process::AbstractTransformSpecification) -> Type{<:Legolas.AbstractRecord}

Return Legolas schema of record returned by successful `process` application.
"""
function output_specification end
